@model List<GetProcessAndMachineOfLineModel>
@{
    ViewData["Title"] = "Detail Monitoring";
    var lineDataCount = Model.Count;
    var factoryId = ViewBag.FactoryId;
    int lineId = ViewBag.LineId;
    var line = await _lineService.GetById(lineId);
}

<h4 class="setting-header">
    <a href='@Url.Action("Index", "Monitoring", new {factoryId =  @factoryId})'>Monitoring screen</a>
    <svg class=" a-s-fa-Ha-pa c-qd" width="24px" height="24px" viewBox="0 0 24 24" focusable="false" fill="currentColor"><path d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"></path></svg>
    @line?.LineNo
</h4>

@if(lineDataCount > 0)
{
    <div class="line-container" id="line-container">
        <div class="line-info-header">
            <div class="line-info-header-main">
                <div>
                    <div><strong>LineNo: @Model[0].LineNo</strong></div>
                    <div>ProductName: @Model[0].ProductName</div>
                </div>
            </div>
            <div class="line-info-header-expanse">
                <ul>
                    <li>LineName: @Model[0].LineName</li>
                    <li>ProductNo: @Model[0].ProductNo</li>
                </ul>
            </div>
        </div>
        <div class="line-info-body" id="line-info-body">
            @for(int j = 0; j < lineDataCount; j++){
                <div class="line-info-detail">
                    <div class="line-info-detail-main">
                        <div>StationNo: @Model[j].StationNo</div>
                        <div>ProcessName: @Model[j].ProcessName</div>
                    </div>
                    <div class="line-info-detail-expanse">
                        <ul class="productNumber" id="@Model[j].StationId">
                            <li></li>
                        </ul>
                    </div>
                    <div class="line-info-detail-expanse">
                        <ul>
                            <li>StationName: @Model[j].StationName</li>
                            <li>MachineNo: @Model[j].MachineNo</li>
                            <li>MachineName: @Model[j].MachineName</li>
                            <li>MachineIP: @Model[j].MachineIp</li>
                            <li>IotMachine: @Model[j].IoTMachine</li>
                            <li>ProcessNo: @Model[j].ProcessNo</li>
                            <li>PatternNo: @Model[j].PatternNo</li>
                        </ul>
                    </div>
                </div>

                @if(j != lineDataCount - 1){
                    <div class="arrow"><br>&#8594;</div>
                }
            }
        </div>
    </div>

    <div class="contextMenu" id="contextMenu" style="display: none; position: absolute; background-color: white; border: 1px solid #ccc;">
        <div><a href="@Url.Action("Line", "Setting", new {factoryId =  @factoryId})">Line setting</a></div>
        <div><a href="@Url.Action("LineDetail", "Setting", new {factoryId =  @factoryId, lineId = @lineId})">Station setting</a></div>
        <div><a href="@Url.Action("Product", "Setting", new {factoryId =  @factoryId})">Product setting</a></div>
        <div><a href="@Url.Action("ProductDetail", "Setting", new {factoryId =  @factoryId, productId = @line.ProductId})">Process setting</a></div>
        <div><a href="@Url.Action("Machine", "Setting", new {factoryId =  @factoryId})">Machine setting</a></div>
        <div><a href="@Url.Action("ProductLine", "Assigning", new {factoryId =  @factoryId})">Assigning product</a></div>
        <div><a href="@Url.Action("StationProcess", "Assigning", new {factoryId =  @factoryId, lineId = @lineId})">Assigning process</a></div>
        <div><a href="@Url.Action("MachineLine", "Assigning", new {factoryId =  @factoryId, lineId = @lineId})">Assigning Machine</a></div>
    </div>
}

@section Scripts{
    <script>
        var lineContainer = document.getElementById('line-container');
        var contextMenu = document.getElementById('contextMenu');

        lineContainer.addEventListener("click", function(event) {
            event.preventDefault(); // Prevent the default browser context menu from appearing
            contextMenu.style.display = "block";
            contextMenu.style.left = event.clientX + "px";
            contextMenu.style.top = event.clientY + "px";
        });

        document.addEventListener('click', function(event) {
            if (!lineContainer.contains(event.target) && !contextMenu.contains(event.target)) {
                contextMenu.style.display = 'none';
            }
        });
    </script>
    <script>
        async function updateProductNumbers(startIndex, batchSize) {
            var lineInfoDetailElements = document.querySelectorAll('.line-info-detail');

            for (let i = startIndex; i < Math.min(startIndex + batchSize, lineInfoDetailElements.length); i++) {
                const detailElement = lineInfoDetailElements[i];
                const stationId = detailElement.querySelector('.productNumber').id;
                const productNumberList = detailElement.querySelector(`.productNumber li`);

                try {
                    const response = await fetch(`/api/OpenApi/GetProductNumber/${stationId}`);
                    const data = await response.json();
                    productNumberList.textContent = data.result;
                } catch (error) {
                    console.error('Error fetching data:', error);
                }
            }
        }

        const batchSize = @_settings.ReloadMonitoringBatchSize; // Number of requests per batch
        const requestDelay = @_settings.ReloadMonitoringMilliseconds; // Delay in milliseconds between batches

        let startIndex = 0;

        function processBatch() {
            updateProductNumbers(startIndex, batchSize);
            startIndex += batchSize;

            if (startIndex >= document.querySelectorAll('.line-info-detail').length) {
                startIndex = 0;
            }
        }

        // Call the function initially
        processBatch();

        setInterval(processBatch, requestDelay);
    </script>
    <style>
        .contextMenu a{
            text-decoration: none;
            color: black;
        }
        .contextMenu div:hover{
            background-color: #0060C0;
        }
        .contextMenu div:hover a{
            color: white;
        }
        .arrow {
            font-size: 20px;
            line-height: 1;
            margin-inline: 10px;
        }
        .line-container{
            display: flex;
            margin-block: 30px;
            margin-inline: 10px;
        }
        .line-info-body{
            display: flex;
        }
        .line-info-header{
            margin-right: 50px;
        }

        .line-info-header-main, .line-info-header-expanse{
            width: 150px;
        }

        .line-info-header-main{
            
            border: 1px solid rgb(0, 0, 0);
            border-radius: 0px;
            height: 50%;
            text-align: center;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .line-info-header-expanse{
            border: 1px solid rgb(0, 0, 0);
            height: 50%;
        }
        .line-info-detail-main{
        
            border: 1px solid rgb(0, 0, 0);
            border-radius: 0px;
        }
        .line-info-detail-expanse{
            border: 1px solid rgb(0, 0, 0);
        }
        .line-container ul{
            margin-block-start: 0em;
            margin-block-end: 0em;
            margin-inline-start: 0px;
            margin-inline-end: 0px;
            padding-inline-start: 20px;
        }

        .line-container .line-info-header-main {
            background-color: #3085d6ab;
        }
        .line-container .line-info-detail-main {
            background-color: #0a58ca38;
        }

        .line-container{
            cursor: pointer;
        }
        .line-container:hover{
           color: blue;
        }
        
    </style>
}