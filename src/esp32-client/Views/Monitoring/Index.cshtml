@model esp32_client.Controllers.MonitoringController.MonitoringFilterModel
@{
    ViewData["Title"] = "Monitoring";

    int factoryId = ViewBag.FactoryId;

    int pageIndex = ViewBag.PageIndex;
    int pageSize = ViewBag.PageSize;

    var data = await _lineService.GetProcessAndMachineOfLine(factoryId, Model.IoTMachine, Model.NormalMachine);

    var lines = data.DistinctBy(s => s.LineId).Where(s => s.LineId != 0).ToList().ToPagedListModel(pageIndex, pageSize);

    var factories = await _factoryService.GetAll();

    var listMachine = await _machineService.GetAll();

    var listSelectPageSize = new List<int>{1,2,3,5,10};

}
<h4 class="setting-header" style="text-align: center;">Monitoring screen</h4>

<div class="pagination-container">
    <div class="m-3">
        @using (Html.BeginForm("Index", "Monitoring", FormMethod.Post, new { @enctype = "multipart/form-data", @id = "searchByFactoryId" }))
        {
            <label for="factoryId" class="form-label">Factory name:</label>
            <select data-val="true" data-val-required="The Number field is required." id="factoryId" name="factoryId" onchange="submitById('searchByFactoryId')">

                @foreach (var item in factories)
                {
                    @if (factoryId == item.Id)
                    {
                        <option value='@item.Id' selected="selected">@item.FactoryName</option>
                    }
                    else
                    {
                        <option value='@item.Id'>@item.FactoryName</option>
                    }
                }
            </select>

            <label for="factoryId" class="form-label">PageSize:</label>
            <select data-val="true" data-val-required="The Number field is required." id="pageSize" name="pageSize" onchange="submitById('searchByFactoryId')">

                @foreach (var item in listSelectPageSize)
                {
                    @if (pageSize == item)
                    {
                        <option value='@item' selected="selected">@item</option>
                    }
                    else
                    {
                        <option value='@item'>@item</option>
                    }
                }
            </select>
            @Html.HiddenFor(s => s.IoTMachine);
            @Html.HiddenFor(s => s.NormalMachine);
        }
    </div>

    <div class="pagination m-3">
        @if(lines.HasPreviousPage)
        {
            int previousPage= pageIndex - 1;
            <a href='@Url.Action("Index", "Monitoring", new {factoryId =  @factoryId, pageIndex = @previousPage, pageSize = @pageSize, iotMachine = @Model.IoTMachine, normalMachine = @Model.NormalMachine})'>&laquo;</a>
        }

        @for(int i = 0; i < lines.TotalPage; i++){
            int pageDisplay = i + 1;
            if(i == pageIndex){
                <a class="active" href="">@pageDisplay</a>
            }else{
                <a href='@Url.Action("Index", "Monitoring", new {factoryId =  @factoryId, pageIndex = @i, pageSize = @pageSize, iotMachine = @Model.IoTMachine, normalMachine = @Model.NormalMachine})'>@pageDisplay</a>
            }
        }

        @if(lines.HasNextPage)
        {
            int nextPage = pageIndex + 1;
            <a href='@Url.Action("Index", "Monitoring", new {factoryId =  @factoryId, pageIndex = @nextPage, pageSize = @pageSize, iotMachine = @Model.IoTMachine, normalMachine = @Model.NormalMachine})'>&raquo;</a>
        }
    </div>
</div>

@using (Html.BeginForm("Index", "Monitoring", FormMethod.Get, new
{
    @enctype = "multipart/form-data",
    @id = "filter"
}))
{
     <div class="m-3">
        <label for="iotMachine" class="form-label">IoT Machine</label>
        @Html.CheckBoxFor(s => s.IoTMachine)
        <label for="normalMachine" class="form-label">Normal Machine</label>
        @Html.CheckBoxFor(s => s.NormalMachine)
        <input type="number" class="form-control" id="pageSize" name="pageSize" style="display: none;" value='@pageSize'>
        <input type="number" class="form-control" id="factoryId" name="factoryId" style="display: none;" value='@factoryId'>
        
    </div>
}

@if (lines.Data.Count > 0)
{
    @for (var i = 0; i < lines.Data.Count; i++)
    {
        var lineData = data.Where(s => s.LineId == lines.Data[i].LineId).ToList();
        var lineDataCount = lineData.Count;
        if(lineDataCount > 0)
        {
            <div class="line-container">
                <div class="line-info-header">
                    <div class="line-info-header-main">
                        <div>
                            <div><strong>@lineData[0].LineNo</strong></div>
                            <div>@lineData[0].ProductName</div>
                        </div>
                    </div>
                    <div class="line-info-header-expanse">
                        <ul>
                            <li>@lineData[0].LineName</li>
                            <li>@lineData[0].ProductNo</li>
                        </ul>
                    </div>
                </div>
                <div class="line-info-body">
                    @for(int j = 0; j < lineDataCount; j++){
                        <div class="line-info-detail">
                            <div class="line-info-detail-main">
                                <div>@lineData[j].StationNo</div>
                                <div>@lineData[j].ProcessName</div>
                            </div>
                            <div class="line-info-detail-expanse">
                                <ul class="productNumber" id="@lineData[j].StationId">
                                    <li></li>
                                </ul>
                            </div>
                            <div class="line-info-detail-expanse">
                                <ul>
                                    <li>@lineData[j].MachineName</li>
                                    <li>@lineData[j].ProcessNo</li>
                                </ul>
                            </div>
                        </div>

                        @if(j != lineDataCount - 1){
                            <div class="arrow"><br>&#8594;</div>
                        }
                    }
                </div>
            </div>
        }
    }
}


@section Scripts{
    <style>
        .arrow {
            font-size: 20px;
            line-height: 1;
            margin-inline: 10px;
        }
        .line-container{
            display: flex;
            margin-block: 30px;
            margin-inline: 10px;
        }
        .line-info-body{
            display: flex;
        }
        .line-info-header{
            margin-right: 50px;
        }

        .line-info-header-main, .line-info-header-expanse{
            width: 150px;
        }

        .line-info-header-main{
            
            border: 1px solid rgb(0, 0, 0);
            border-radius: 0px;
            height: 50%;
            text-align: center;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .line-info-header-expanse{
            border: 1px solid rgb(0, 0, 0);
            height: 50%;
        }
        .line-info-detail-main{
        
            border: 1px solid rgb(0, 0, 0);
            border-radius: 0px;
        }
        .line-info-detail-expanse{
            border: 1px solid rgb(0, 0, 0);
        }
        .line-container ul{
            margin-block-start: 0em;
            margin-block-end: 0em;
            margin-inline-start: 0px;
            margin-inline-end: 0px;
            padding-inline-start: 20px;
        }

        .line-container:nth-child(3n+1) .line-info-header-main {
            background-color: rgb(192, 214, 155);
        }
        .line-container:nth-child(3n+1) .line-info-detail-main {
            background-color: rgb(235, 241, 222)
        }
        .line-container:nth-child(3n+2) .line-info-header-main {
            background-color: rgb(149, 179, 215);
        }
        .line-container:nth-child(3n+2) .line-info-detail-main {
            background-color: rgb(198, 217, 241);
        }
        .line-container:nth-child(3n) .line-info-header-main {
            background-color: rgb(179, 162, 199);
        }
        .line-container:nth-child(3n) .line-info-detail-main {
            background-color: rgb(204, 193, 218);
        }
        
    </style>
    <script>

        async function updateProductNumbers(startIndex, batchSize) {
            var lineInfoDetailElements = document.querySelectorAll('.line-info-detail');

            for (let i = startIndex; i < Math.min(startIndex + batchSize, lineInfoDetailElements.length); i++) {
                const detailElement = lineInfoDetailElements[i];
                const stationId = detailElement.querySelector('.productNumber').id;
                const productNumberList = detailElement.querySelector(`.productNumber li`);

                try {
                    const response = await fetch(`/api/OpenApi/GetProductNumber/${stationId}`);
                    const data = await response.json();
                    productNumberList.textContent = data.result;
                } catch (error) {
                    console.error('Error fetching data:', error);
                }
            }
        }

        const batchSize = @_settings.ReloadMonitoringBatchSize; // Number of requests per batch
        const requestDelay = @_settings.ReloadMonitoringMilliseconds; // Delay in milliseconds between batches

        let startIndex = 0;

        function processBatch() {
            updateProductNumbers(startIndex, batchSize);
            startIndex += batchSize;

            if (startIndex >= document.querySelectorAll('.line-info-detail').length) {
                startIndex = 0;
            }
        }

        // Call the function initially
        processBatch();

        setInterval(processBatch, requestDelay);

    </script>
}