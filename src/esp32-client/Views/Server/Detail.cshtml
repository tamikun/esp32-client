@using esp32_client.Controllers;
@using Newtonsoft.Json;
@model ServerModelDetail

@{

    @await Html.PartialAsync("~/Views/Components/ListServer.cshtml", await
ListServer.GetInstance(_clientService).GetStaticList())

    <div class="alert-message">
        @if (TempData["AlertMessage"] is not null)
        {
            var alertModel = JsonConvert.DeserializeObject<AlertModel>(TempData["AlertMessage"].ToString());
            @await Html.PartialAsync("~/Views/Components/Alert.cshtml", alertModel)
        }
    </div>

    <div class="tab-content">
        <div id=@Model.IpAddress style="display: block;">
            <h2>Server @Model.IpAddress</h2>

            <table border="0">
                <tr>
                    <td>
                        <label for="newFile">Upload a file</label>
                    </td>
                    <td colspan="2">
                        <input id="newFile" type="file" onchange="setPath('@Model.IpAddress')" style="width:100%;">
                    </td>
                </tr>
                <tr>
                    <td>
                        <label for="filePath">Set path on server</label>
                    </td>
                    <td>
                        <input id="filePath" type="text" style="width:100%;">
                    </td>
                    <td>
                        <button id="upload" type="button" onclick="postFile('@Model.IpAddress')">Upload</button>

                    </td>
                </tr>

            </table>
            <br>


            @{
                var getUrl = $"http://{@Model.IpAddress}/";
                if (!string.IsNullOrEmpty(Model.SubDirectory))
                {
                    getUrl = $"http://{@Model.IpAddress}/{@Model.SubDirectory}/";
                }

                var listFile = await _clientService.GetListEspFile(getUrl);

                if (listFile.Count > 0)
                {
                    <table class="fixed" border="1">
                        <col width="800px" />
                        <col width="300px" />
                        <col width="300px" />
                        <col width="100px" />
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Type</th>
                                <th>Size (Bytes)</th>
                                <th>Delete</th>
                            </tr>
                        </thead>
                        <tbody>

                            @{
                                var actionDetail = nameof(@ServerController.Detail);
                                var actionDelete = nameof(@ServerController.Delete);
                            }

                            @if (!string.IsNullOrEmpty(Model.SubDirectory))
                            {
                                string backDirString = "";
                                var backDir = Model.SubDirectory.Split('/').ToList();
                                if (backDir.Count > 1)
                                {
                                    backDirString = string.Join('/', backDir.Take(backDir.Count - 1));
                                }

                                <td colspan="4"><a
                                        href="@Url.Action(@actionDetail, new { ipAddress =  @Model.IpAddress, subDirectory =  @backDirString})">...</a>
                                </td>
                            }

                            @foreach (var file in listFile)
                            {

                                @* var newUrl = Model.IpAddress + "/" + file.FileName; *@

                                var subDir = "";
                                if (!string.IsNullOrEmpty(Model.SubDirectory))
                                {
                                    subDir = Model.SubDirectory + "/" + file.FileName;
                                }
                                else
                                {
                                    subDir = file.FileName;
                                }

                                if (file.FileType == "directory")
                                {
                                    <tr>
                                        <td><a
                                                href="@Url.Action(@actionDetail, new { ipAddress =  @Model.IpAddress, subDirectory =  @subDir})">
                                                @file.FileName
                                            </a>
                                        </td>
                                        <td>@file.FileType</td>
                                        <td>@file.FileSize</td>
                                        <td>
                                            <a class="button-link"
                                                href="@Url.Action(@actionDelete, new { ipAddress =  @Model.IpAddress, subDirectory =  @Model.SubDirectory, fileName = @file.FileName})">Delete</a>
                                        </td>
                                    </tr>
                                }
                                else
                                {
                                    var newUrl = "http://" + @Model.IpAddress + "/" + file.FileName;
                                    if (!string.IsNullOrEmpty(Model.SubDirectory))
                                    {
                                        newUrl = "http://" + @Model.IpAddress + "/" + Model.SubDirectory + "/" + file.FileName;
                                    }

                                    <tr>
                                        <td><a href='@Url.Action("DownloadFile", "OpenApi", new {url = @newUrl})'>@file.FileName</a>
                                        </td>
                                        <td>@file.FileType</td>
                                        <td>@file.FileSize</td>
                                        <td>
                                            <a class="button-link"
                                                href="@Url.Action(@actionDelete, new { ipAddress =  @Model.IpAddress, subDirectory =  @Model.SubDirectory, fileName = @file.FileName})">Delete</a>
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    var serverPageSource = await _clientService.GetAsyncApi(getUrl, false);

                    <div id="server-content">@serverPageSource</div>
                }
            }
        </div>
    </div>
}

@section Scripts{
    <script>

        var toggles = document.querySelectorAll('.toggle');

        toggles.forEach(function (toggle) {
            toggle.addEventListener('click', function () {
                var parentLi = toggle.parentNode;
                var nestedUl = parentLi.querySelector('ul');

                if (nestedUl.style.display === 'none') {
                    nestedUl.style.display = 'block';
                    toggle.textContent = '[-]';
                } else {
                    nestedUl.style.display = 'none';
                    toggle.textContent = '[+]';
                }
            });
        });

        function setPath(ipAddress) {

            var default_path = document.querySelector(`.tab-content [id="${ipAddress}"] [id="newFile"]`).files[0].name;

            document.querySelector(`.tab-content [id="${ipAddress}"] [id="filePath"]`).value = default_path;
        }

        function postFile(ipAddress) {
            var fileInput = document.getElementById('newFile');
            var filePath = document.getElementById('filePath');

            var formData = new FormData();
            formData.append('newFile', fileInput.files[0]);
            formData.append('filePath', filePath.value);
            formData.append('ipAddress', ipAddress);

            $.ajax({
                type: 'POST',
                url: '/api/OpenApi/PostAsyncFile', //client side cannot request http (just https)
                data: formData,
                processData: false,
                contentType: false,
                success: function (response) {
                    console.log('POST request successful');
                    console.log(response);

                    if (response.statusCode === 200) {
                        handleEvent('success', 'Request successful!')
                    } else if (response.statusCode === 404) {
                        handleEvent('error', 'Not Found ' + response.statusCode)
                    } else {
                        handleEvent('error', 'Unexpected status code: ' + response.statusCode)
                    }

                },
                error: function (xhr, status, error) {
                    console.log(xhr);
                    handleEvent('error', 'Request failed!')
                }
            });
        }
    </script>
}