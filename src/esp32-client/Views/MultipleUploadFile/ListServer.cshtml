@model MultipleUploadFileModel

@{
    ViewData["Title"] = "Upload Multiple Files";

    var listServer = await ListServer.GetInstance(_clientService).GetStaticList();
    Dictionary<string, object> listServerDict = new Dictionary<string, object>();
    foreach (var server in listServer)
    {
        listServerDict.Add($"http://{server.IpAddress}/", await
        _clientService.GetDictionaryFile($"http://{server.IpAddress}/"));
    }

    System.Console.WriteLine("==== model: " + Newtonsoft.Json.JsonConvert.SerializeObject(Model));
    System.Console.WriteLine("==== listServerDict: " + Newtonsoft.Json.JsonConvert.SerializeObject(listServerDict));
}
<div class="col-sm-6 p-3">
    <ul>
        @foreach (var item in listServerDict)
        {
            <li>
                @{
                    await RenderDictionaryItem(item.Key, item.Value);
                }
            </li>
        }
    </ul>
</div>
@functions {
    async Task RenderDictionaryItem(string key, object value)
    {
        var displayName = "";

        // get: {ip}/{path}
        var getPath = key.Split("//").Skip(1).FirstOrDefault().Split('/').Where(s => !string.IsNullOrEmpty(s)).ToList();

        if (getPath.Count > 1)
        {
            //Exist path
            //Get the folder
            displayName = getPath.LastOrDefault();
        }
        else
        {
            //just IP
            //Get ServerName
            var serverInfo = (await ListServer.GetInstance(_clientService).GetStaticList())
            .Where(s => s.IpAddress == getPath.FirstOrDefault()).FirstOrDefault();

            displayName = string.IsNullOrEmpty(serverInfo?.ServerName) ? $"{serverInfo?.IpAddress} {{undefined}}" :
            serverInfo.ServerName;
        }

        @if (value is Dictionary<string, object> nestedDictionary)
        {

            <span class="toggle">[+]</span>
            <span>@displayName</span>

            var getIndex = Model.ListSelectedServer.FindIndex(s =>
            {
                if (string.IsNullOrEmpty(s.Folder))
                {
                    return key == s.IpAddress;
                }
                else
                {
                    return key == s.IpAddress + s.Folder + "/";
                }
            });

            if (getIndex >= 0)
            {
                if (Model.ListSelectedServer[getIndex].Folder == "VDATA")
                {
                    @Html.CheckBoxFor(model => model.ListSelectedServer[getIndex].IsSelected)
                    @Html.HiddenFor(model => model.ListSelectedServer[getIndex].Folder)
                    @Html.HiddenFor(model => model.ListSelectedServer[getIndex].IpAddress)
                }
                else
                {
                    @Html.HiddenFor(model => model.ListSelectedServer[getIndex].IsSelected)
                    @Html.HiddenFor(model => model.ListSelectedServer[getIndex].Folder)
                    @Html.HiddenFor(model => model.ListSelectedServer[getIndex].IpAddress)
                }
            }
            <ul style="display: none;">
                @foreach (var nestedItem in nestedDictionary)
                {
                    <li>
                        @{
                            await RenderDictionaryItem(nestedItem.Key, nestedItem.Value);
                        }
                    </li>
                }
            </ul>
        }
        else
        {

            var downloadFileUrl = value.ToString();

            if (downloadFileUrl.EndsWith('/'))
            {
                downloadFileUrl = downloadFileUrl.Remove(downloadFileUrl.LastIndexOf('/'));
            }

            <span><a href='@Url.Action("DownloadFile", "OpenApi", new {url = @downloadFileUrl})'>@displayName</a></span>
            @* <span>: @value</span> *@
        }
    }
}

