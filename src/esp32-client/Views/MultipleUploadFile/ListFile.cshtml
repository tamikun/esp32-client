@model MultipleUploadFileModel

@{
    Dictionary<string, object> fileDict = await _fileService.GetDictionaryFile(null);

    Model.ListSelectedDataFile = new List<SelectedDataFileModel>();
}
<div class="col-sm-6 p-3" style="border: groove;">
    <ul>
        <li style="text-align: center;"><strong>PC</strong></li>
        @foreach (var item in fileDict)
        {
            <li>
                @{
                    RenderDictionaryItem(item.Key, item.Value);
                }
            </li>
        }
    </ul>
</div>
@functions {
    void RenderDictionaryItem(string key, object value)
    {
        @if (value is Dictionary<string, object> nestedDictionary)
        {
            @* <span class="toggle">[+]</span> *@
            <i class="fa fa-folder toggle-folder" style="font-size:18px;color:#fbcf4b;cursor:pointer;"></i>
            <span>@key</span>
            <ul style="display: none;">
                @foreach (var nestedItem in nestedDictionary)
                {
                    <li>
                        @{
                            RenderDictionaryItem(nestedItem.Key, nestedItem.Value);
                        }
                    </li>
                }
            </ul>
        }
        else
        {
            <i class="fa fa-file" style="font-size:15px;color:#82a6c9;"></i>
            <span>@key</span>
            @* <span>: @value</span> *@
            if (value.ToString().Contains(_settings.FileDataDirectory + "VDATA"))
            {
                Model.ListSelectedDataFile.Add(new SelectedDataFileModel
                    {
                        FilePath = value.ToString(),
                        IsSelected = false
                    });

                var getIndex = Model.ListSelectedDataFile.Count - 1;
                @Html.CheckBoxFor(model => model.ListSelectedDataFile[getIndex].IsSelected)
                @Html.HiddenFor(model => model.ListSelectedDataFile[getIndex].FilePath)
            }

        }
    }
}

