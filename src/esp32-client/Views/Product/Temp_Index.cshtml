@model ProductCreateModel
@{
    ViewData["Title"] = "Product";

    var listPatternNumber = new List<SelectListItem>();


    (await _patternService.GetAll()).ForEach(s => listPatternNumber.Add(new SelectListItem
            {
                Value = s.PatternNumber,
                Text =
            s.PatternNumber
            }));
}

@await Html.PartialAsync("~/Views/Product/ListProduct.cshtml")

<div class="tab-content">

    @using (Html.BeginForm("Add", "Product", FormMethod.Post, new { @enctype = "multipart/form-data" }))
    {

        <form id="productForm">
            <label for="productName">Product Name:</label>
            @Html.EditorFor(s => s.ProductName)
            <br>
            <button type="button" onclick="addProcessField()">Add Process</button>
            <br><br>
            <div id="processFields">
                <!-- Process fields will be dynamically added here -->
            </div>
            <br>
            <input type="submit" value="Save">
        </form>

    }
</div>

@section Scripts{
    <script>
        let processCount = -1;

        function addProcessField() {
            processCount++;

            const processFields = document.getElementById("processFields");

            const processDiv = document.createElement("div");

            processDiv.setAttribute("id", `processField${processCount}`);

            processDiv.innerHTML = `
                                                                        <label for="ListProcessPattern_${processCount}__ProcessName">Process ${processCount}:</label>
                                                                        <input type="text" id="ListProcessPattern_${processCount}__ProcessName" name="ListProcessPattern[${processCount}].ProcessName" required>
                                                                        <button type="button" onclick="removeProcessField(${processCount})">Remove</button>
                                                                        <br>
                                                                        `;

            const selectElement = document.createElement("select");
            selectElement.classList.add("form-control");
            selectElement.id = `ListProcessPattern_${processCount}__PatternNumber`;
            selectElement.name = `ListProcessPattern[${processCount}].PatternNumber`;

            // Add the "Choose pattern" option
            const choosePatternOption = document.createElement("option");
            choosePatternOption.value = "";
            choosePatternOption.text = "Choose pattern";
            selectElement.appendChild(choosePatternOption);

            // Add other options from the listPatternNumber
            const listPatternNumber = @Html.Raw(Json.Serialize(listPatternNumber));
            listPatternNumber.forEach(option => {
            const optionElement = document.createElement("option");
            optionElement.value = option.value;
            optionElement.text = option.text;
            selectElement.appendChild(optionElement);
            });


            // Append Select form to processDiv
            processDiv.appendChild(selectElement);

            // Append processDiv to processFields
            processFields.appendChild(processDiv);
        }

        function removeProcessField(processNumber) {
            const processDiv = document.getElementById(`processField${processNumber}`);
            processDiv.parentNode.removeChild(processDiv);
        }
    </script>

}